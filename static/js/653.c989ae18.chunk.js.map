{"version":3,"file":"static/js/653.c989ae18.chunk.js","mappings":"6KA4BA,UAlBa,WACX,OAA0BA,EAAAA,EAAAA,UAAS,GAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAUC,EAAAA,EAAAA,QAAmB,MAE7BC,GAAoBC,EAAAA,EAAAA,cAAY,SAACC,GACrCL,GAAS,SAACM,GAAD,OAAcA,EAAM,CAApB,GACV,GAAE,IACH,OACE,4BACE,UAAC,KAAD,YACE,gBAAKC,QAASJ,EAAd,SAAkCJ,KAClC,SAAC,KAAD,CAAeQ,QAAS,kBAAMN,EAAQO,QAASC,UAAU,CAAEC,KAAMX,GAAzC,QAG1B,SAACY,EAAD,CAAUC,SAAUX,EAAeF,MAAAA,MAGxC,EAID,IAAMY,EAAuBE,EAAAA,MAAW,YAAwC,IAArCD,EAAoC,EAApCA,SAAUb,EAA0B,EAA1BA,MACnD,GAAwCD,EAAAA,EAAAA,UAAS,GAAjD,eAAOgB,EAAP,KAAqBC,EAArB,KACAC,QAAQC,IAAI,0BAEZC,EAAAA,EAAAA,qBAAoBN,GAAU,iBAAO,CACnCH,UAAAA,EAD4B,IAG9B,IAAMA,EAAY,SAACU,GACjBH,QAAQC,IAAIE,GACZJ,GAAgB,SAACK,GAAD,OAAUA,EAAO,CAAjB,GACjB,EACD,OACE,UAAC,KAAD,YACE,UAAC,KAAD,mBAAiBN,MACjB,UAAC,KAAD,sBAAoBf,OAGzB,G","sources":["views/nest/index.tsx"],"sourcesContent":["import { BetweenBox, CenterBox, FlexDiv, ItemCenterBox } from 'style/componends/Flex';\nimport { FC, ReactElement, Ref, useCallback, useImperativeHandle, useRef, useState } from 'react';\nimport React from 'react';\ninterface ModalProps {\n  showModal: (params: { name: number }) => void;\n}\ninterface Iprops {\n  innerRef: Ref<{ showModal: (params: any) => void } | undefined>;\n  state: any;\n}\nconst Nest = (): ReactElement => {\n  const [state, setState] = useState(2);\n  const infoRef = useRef<ModalProps>(null);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const handleOnclickDemo = useCallback((num: any) => {\n    setState((pre: any) => pre + 1);\n  }, []);\n  return (\n    <div>\n      <BetweenBox>\n        <div onClick={handleOnclickDemo}>{state}</div>\n        <ItemCenterBox onClick={() => infoRef.current!.showModal({ name: state as number })} />\n      </BetweenBox>\n      {/* 测试 */}\n      <NestTest innerRef={infoRef} {...{ state }} />\n    </div>\n  );\n};\nexport default Nest;\n\n// 这个只是测试例子\nconst NestTest: FC<Iprops> = React.memo(({ innerRef, state }): ReactElement => {\n  const [modalVisible, setModalVisible] = useState(1);\n  console.log('next11111副本');\n  // @description:父组件访问子组件的ref，是可以获取到所有的实例的，但是我们希望，父组件只能获取指定的某个方法，就可以使用这个hooks\n  useImperativeHandle(innerRef, () => ({\n    showModal,\n  }));\n  const showModal = (params: { name: number }) => {\n    console.log(params);\n    setModalVisible((next) => next + 1);\n  };\n  return (\n    <FlexDiv>\n      <CenterBox>Nest2{modalVisible}</CenterBox>\n      <CenterBox>Nest2222{state}</CenterBox>\n    </FlexDiv>\n  );\n});\n"],"names":["useState","state","setState","infoRef","useRef","handleOnclickDemo","useCallback","num","pre","onClick","current","showModal","name","NestTest","innerRef","React","modalVisible","setModalVisible","console","log","useImperativeHandle","params","next"],"sourceRoot":""}